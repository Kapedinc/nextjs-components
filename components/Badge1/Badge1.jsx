/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { styled } from '@mui/material/styles';

const ColorGreenSizeDefaul = styled('div')(({ theme }) => ({
  backgroundColor: `rgba(235, 251, 238, 1)`,
  borderRadius: `14px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `3px 8px`,
  boxSizing: `border-box`,
  height: 'auto',
  width: 'fit-content',
}));

const Frame1 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Ellipse1 = styled('img')({
  height: `6px`,
  width: `6px`,
  margin: `0px`,
});

const Label = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(55, 178, 77, 1)`,
  fontStyle: `normal`,
  fontFamily: `Inter`,
  fontWeight: `500`,
  fontSize: `13px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `16px`,
  textTransform: `none`,
  margin: `0px 0px 0px 8px`,
}));

const Frame11 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Ellipse11 = styled('img')({
  height: `6px`,
  width: `6px`,
  margin: `0px`,
});

const Label1 = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(73, 80, 87, 1)`,
  fontStyle: `normal`,
  fontFamily: `Inter`,
  fontWeight: `500`,
  fontSize: `13px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `16px`,
  textTransform: `none`,
  margin: `0px 0px 0px 8px`,
}));

const Frame12 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Ellipse12 = styled('img')({
  height: `6px`,
  width: `6px`,
  margin: `0px`,
});

const Label2 = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(247, 103, 7, 1)`,
  fontStyle: `normal`,
  fontFamily: `Inter`,
  fontWeight: `500`,
  fontSize: `13px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `16px`,
  textTransform: `none`,
  margin: `0px 0px 0px 8px`,
}));

const Frame13 = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Ellipse13 = styled('img')({
  height: `6px`,
  width: `6px`,
  margin: `0px`,
});

const Label3 = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(240, 62, 62, 1)`,
  fontStyle: `normal`,
  fontFamily: `Inter`,
  fontWeight: `500`,
  fontSize: `13px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `16px`,
  textTransform: `none`,
  margin: `0px 0px 0px 8px`,
}));

const Label4 = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(55, 178, 77, 1)`,
  fontStyle: `normal`,
  fontFamily: `Inter`,
  fontWeight: `400`,
  fontSize: `11px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `14px`,
  textTransform: `none`,
  margin: `0px`,
}));

const Label5 = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(247, 103, 7, 1)`,
  fontStyle: `normal`,
  fontFamily: `Inter`,
  fontWeight: `400`,
  fontSize: `11px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `14px`,
  textTransform: `none`,
  margin: `0px`,
}));

const Label6 = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(240, 62, 62, 1)`,
  fontStyle: `normal`,
  fontFamily: `Inter`,
  fontWeight: `400`,
  fontSize: `11px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `14px`,
  textTransform: `none`,
  margin: `0px`,
}));

function Badge1(props) {
  return (
    <ColorGreenSizeDefaul className={props.className}>
      <Frame1>
        <Ellipse1
          src={`assets/images/Badge_Ellipse_1.png`}
          loading="lazy"
          alt={'Ellipse 1'}
        />
        <Label>{`Label`}</Label>
      </Frame1>
      {false && (
        <Frame11>
          <Ellipse11
            src={`assets/images/Badge_Ellipse_1_1.png`}
            loading="lazy"
            alt={'Ellipse 1'}
          />
          <Label1>{`Label`}</Label1>
        </Frame11>
      )}
      {false && (
        <Frame12>
          <Ellipse12
            src={`assets/images/Badge_Ellipse_1_2.png`}
            loading="lazy"
            alt={'Ellipse 1'}
          />
          <Label2>{`Label`}</Label2>
        </Frame12>
      )}
      {false && (
        <Frame13>
          <Ellipse13
            src={`assets/images/Badge_Ellipse_1_3.png`}
            loading="lazy"
            alt={'Ellipse 1'}
          />
          <Label3>{`Label`}</Label3>
        </Frame13>
      )}
      {false && <Label4>{`Label`}</Label4>}
      {false && <Label5>{`Label`}</Label5>}
      {false && <Label6>{`Label`}</Label6>}
    </ColorGreenSizeDefaul>
  );
}

export default Badge1;
